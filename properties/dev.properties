# ------------------------------------------------------------------------------
# Each domain (dev, test, qa, prod etc.) has its own property file that contains
# application and domain specific configuration items.
#
# Application and domain specific configuration files are generated from 
# '*.template' files by Ant script. 
#
# While generation, placeholders in '*.template' files(e.g. @replace_me@) are 
# replaced by actual values from property files. Generated files have the same
# name with the templates, but '.template' extension is removed from them.
#
# Note: Some configuration items in this property file are directly referenced
# by Ant script (build.xml). They are not used while configuration file 
# generation.
# ------------------------------------------------------------------------------



# ==============================================================================
# myapp_server_config.xml (Application config)
# ==============================================================================
myapp_server_config.cache_enabled=true
myapp_server_config.rest.api_url_pattern=/api
myapp_server_config.rest.verification_enabled=true
myapp_server_config.sftp.host=sftpdev.mycompany.com
myapp_server_config.sftp.port=22
myapp_server_config.sftp.user=sftpuser
myapp_server_config.sftp.pass=sftppass
myapp_server_config.sftp.directory=/repository/dev


# ==============================================================================
# myapp_client_config.xml (Application config)
# ==============================================================================
myapp_client_config_auth=enabled
myapp_client_config.service1_url=https://service1dev.mycompany.com
myapp_client_config.service2_url=https://service2dev.mycompany.com


# ==============================================================================
# logging.xml (Application config)
# ==============================================================================
logging.GraylogAppender.graylogHost=graylogtest.mycompany.com
logging.GraylogAppender.graylogPort=12205
logging.GraylogAppender.additionalFields={'environment': 'dev', 'application': 'myapp'}
logging.GraylogAppender.originHost=MyAppDev
logging.GraylogAppender.facility=MyAppDev


# ==============================================================================
# context.xml (Tomcat config)
#
# * Put JDBC driver to Tomcat's lib directory.
#
# * If custom factory is used to decrypt the encrypted password, put 
# decryption library to Tomcat's lib directory. See https://goo.gl/EE1m6i
#
# ==============================================================================
context.resource.datasource.name=jdbc/MYAPPDS
context.resource.datasource.factory=com.mycompany.pool.EncryptedDataSourceFactory
context.resource.datasource.driverClassName=oracle.jdbc.OracleDriver
context.resource.datasource.username=mydbuser
context.resource.datasource.password=f5ca7b13a52473b6af3e947d1ca1c925
context.resource.datasource.url=jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=myappdb.mycompany)(PORT=1521))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=MYAPP.MYCOMPANY.COM)))
context.resource.datasource.connectionProperties=SetBigStringTryClob=true
context.resource.datasource.initialSize=1
context.resource.datasource.minIdle=1
context.resource.datasource.maxActive=20
context.resource.datasource.maxIdle=20
context.resource.datasource.testOnBorrow=true
context.resource.datasource.validationQuery=SELECT 1 FROM DUAL
context.resource.datasource.validationInterval=30000
context.resource.datasource.jdbcInterceptors=ConnectionState;StatementFinalizer;SlowQueryReportJmx(threshold=10000)


# ==============================================================================
# tomcat-users.xml (Tomcat config)
#
# * Use username: admin, pass: MyTomcatPass
#
# * See https://goo.gl/TVsVDq for digested password.
# ==============================================================================
tomcat-users.user.username=admin
tomcat-users.user.password=e6ff51c1e1162e666c5ff15f57b2e9c50041297a
tomcat-users.user.roles=tomcat,manager,manager-gui,manager-script,manager-jmx,manager-status,admin-gui


# ==============================================================================
# build.xml (Ant config)
#
# Note: These variables are not used while configuration file generation. They
# are, instead, directly referenced by Ant script (build.xml).
# ==============================================================================
build.ssh.user=myuser

# Flyway configuration
# JDBC driver must be in classpath.
build.flyway.url=jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=myappdb.mycompany)(PORT=1521))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=MYAPP.MYCOMPANY.COM)))
build.flyway.user=FLYWAYUSER
build.flyway.pass=FLYWAYPASS
build.flyway.schemas=FLYWAY
build.flyway.table=SCHEMA_VERSION_MYAPP
build.flyway.driver=oracle.jdbc.OracleDriver
build.flyway.encoding=ISO_8859-1



# ==============================================================================
# farm.conf 
#
# Note: Some variables such as CONF_APP_NAME and CONF_APP_HOME are also used by 
# Ant script (build.xml).
# ==============================================================================


# ------------------------------------------------------------------------------
# Application's name. Instance names are generated from this. For example, if
# application name is 'myapp', instance names become 'myapp1', 'myapp2', etc.
# ------------------------------------------------------------------------------
CONF_APP_NAME=myapp


# ------------------------------------------------------------------------------
# Path to directory in which Tomcat Farm is installed.
# ------------------------------------------------------------------------------
CONF_APP_HOME=/opt/${CONF_APP_NAME}


# ------------------------------------------------------------------------------
# Domain's name. Each domain (dev, test, qa, prod etc.) has its own
# '*.properties' file (dev.properties, test.properties, etc.)
# ------------------------------------------------------------------------------
CONF_DOMAIN_NAME=dev


# ------------------------------------------------------------------------------
# Contains domain topology and conforms to the following structure:
#
#   CONF_NODE_INSTANCES=node1:instance1,instance2,instance3;\
#                       node2:instance4,instance5,instance6;\
#                       node3:instance7,instance8,instance9
#
# In this structure;
# * nodes are separeted by ';'
# * node name and instances running on it are separated by ':'
# * instances are separeted by ','
#
# When a new node or instance is added or removed, CONF_NODE_INSTANCES must be
# updated on all the nodes.
# ------------------------------------------------------------------------------
CONF_NODE_INSTANCES=host1:${CONF_APP_NAME}1,${CONF_APP_NAME}2,${CONF_APP_NAME}3;\
                    host2:${CONF_APP_NAME}4,${CONF_APP_NAME}5,${CONF_APP_NAME}6


# ------------------------------------------------------------------------------
# Applications might coexist in the same machine and all the instances of each
# application must have unique ports to prevent port conflicts.
# 
# Each application has unique 'CONF_BASE_PORT' and three ports are automatically
# generated from it for each instance: HTTP, HTTPS ve SHUTDOWN.
#
# Port numbers are generated by using 'CONF_BASE_PORT' and instance id. Instance
# id is extracted from instance name(1 for 'myapp1', 2 for 'myapp2', etc.).
#
# For example, if 'CONF_APP_NAME' is 'myapp' and 'CONF_BASE_PORT' is 8000 
# then;
# - instance myapp1's http port is 8001, shutdown port is 8002, https port is 8003.
# - instance myapp2's http port is 8004, shutdown port is 8005, https port is 8006.
# - ...
# ------------------------------------------------------------------------------
CONF_BASE_PORT=9900


# ------------------------------------------------------------------------------
# Home of the Java that is used while starting and stopping the Tomcat.
#
# Although we might have default Java installation on the machine, we might
# specifically use another one residing in 'CONF_JAVA_HOME'.
# ------------------------------------------------------------------------------
CONF_JAVA_HOME=/usr


# ------------------------------------------------------------------------------
# Application specific JVM arguments.
#
# Example: 
#
#   CONF_JVM_PARAM_APP_ARGS=-Dlog4j.configuration=file:${CONF_APP_HOME}/conf/log4j.xml -Dconf=myapp.conf
# ------------------------------------------------------------------------------
CONF_JVM_PARAM_APP_ARGS=


# ------------------------------------------------------------------------------
# JVM memory parameters such as '-Xms', '-Xmx', '-XX:PermSize', etc.
# 
# 'CONF_JVM_PARAM_MEMORY' is only used while Tomcat is starting up. It is not
# used while shutdown.
# 
# Example:
#
#   CONF_JVM_PARAM_MEMORY=-Xms512m -Xmx1024m
# ------------------------------------------------------------------------------
CONF_JVM_PARAM_MEMORY=-Xms512m -Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=512m


# ------------------------------------------------------------------------------
# Tomcat's minimum and maximum thread count limits can be set by passing
# '-DminSpareThreads' and '-DmaxThreads' arguments to JVM. For easier 
# customization, those arguments can be defined in 'CONF_JVM_PARAM_THREAD'.
#
# 'CONF_JVM_PARAM_THREAD' is only used while Tomcat is starting up. It is not
# used while shutdown.
# 
# Example:
#
#   CONF_JVM_PARAM_THREAD=-DminSpareThreads=25 -DmaxThreads=150
# ------------------------------------------------------------------------------
CONF_JVM_PARAM_THREAD=-DminSpareThreads=25 -DmaxThreads=150


# ------------------------------------------------------------------------------
# 'CONF_JVM_PARAM_KEY_STORE' is path to JKS file that contains TLS private key
# which lets Tomcat to serve on HTTPS port.
#
# 'CONF_JVM_PARAM_TRUST_STORE' is path to JKS file that contains root 
# certificates of the services to which the application needs to access over TLS.
# ------------------------------------------------------------------------------
CONF_JVM_PARAM_KEY_STORE=${CONF_APP_HOME}/certs/keystore.jks
CONF_JVM_PARAM_KEY_STORE_PASS=y@4Q6TpxGJGKz+mx
CONF_JVM_PARAM_TRUST_STORE=${CONF_APP_HOME}/certs/truststore.jks
CONF_JVM_PARAM_TRUST_STORE_PASS=y@4Q6TpxGJGKz+mx


# ------------------------------------------------------------------------------
# These variables are used to make sure the instance is started or stopped
# successfully.
#
# When 'start-verify' command of 'instance.sh' is executed, the process
# continues until 'CONF_STARTUP_SUCCESS_MSG' or 'CONF_STARTUP_FAILURE_MSG'
# is seen on the logs. 'start-verify' fails if logs;
#  - contain 'CONF_STARTUP_FAILURE_MSG' or
#  - do not contain 'CONF_STARTUP_SUCCESS_MSG' in 'CONF_STARTUP_TIMEOUT_SECONDS'
#    seconds.
#
# Similarly, if stopping does not complete in 'CONF_SHUTDOWN_TIMEOUT_SECONDS'
# seconds, the process is killed.
#
# Logs are checked every 'CONF_WAIT_INTERVAL_SECONDS' seconds till command
# fails or succeeds.
# ------------------------------------------------------------------------------
CONF_STARTUP_SUCCESS_MSG=Server startup in
CONF_STARTUP_FAILURE_MSG=Cannot start server
CONF_STARTUP_TIMEOUT_SECONDS=150
CONF_SHUTDOWN_TIMEOUT_SECONDS=30
CONF_WAIT_INTERVAL_SECONDS=3


# ------------------------------------------------------------------------------
# High availability (HA) is a must for many applications. Those applications
# must be available while restarting application servers or deploying
# applications. To achieve this, when an operation is completed on a node,
# it is executed on the next node after 'CONF_SERIAL_DOMAIN_OPERATIONS_WAIT_INTERVAL_SECONDS'
# seconds. This behaviour allows load balancer to recognize the node
# is alive again before the next one is getting down.
#
# Note: Commands having '-ha' suffix are considered to support high availability.
# ------------------------------------------------------------------------------
CONF_SERIAL_DOMAIN_OPERATIONS_WAIT_INTERVAL_SECONDS=30